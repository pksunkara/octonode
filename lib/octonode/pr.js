// Generated by CoffeeScript 1.12.7
(function() {
  var Base, Pr,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('./base');

  Pr = (function(superClass) {
    extend(Pr, superClass);

    function Pr(repo, number, client) {
      this.repo = repo;
      this.number = number;
      this.client = client;
    }

    Pr.prototype.info = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr info error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.update = function(obj, cb) {
      return this.client.post("/repos/" + this.repo + "/pulls/" + this.number, obj, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr update error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.close = function(cb) {
      return this.update({
        state: 'closed'
      }, cb);
    };

    Pr.prototype.merged = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/merge", function(err, s, b, h) {
        if (err && err.message === 'null') {
          return cb(null, false);
        }
        return cb(null, s === 204, h);
      });
    };

    Pr.prototype.merge = function(msg, cb) {
      var commit;
      commit = {
        commit_message: msg
      };
      return this.client.put("/repos/" + this.repo + "/pulls/" + this.number + "/merge", commit, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr merge error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.commits = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/commits", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr commits error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.comments = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/comments", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr comments error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.createComment = function(comment, cb) {
      return this.client.post("/repos/" + this.repo + "/pulls/" + this.number + "/comments", comment, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Pr createComment error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.removeComment = function(id, cb) {
      return this.client.del("/repos/" + this.repo + "/pulls/" + this.number + "/comments/" + id, {}, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 204) {
          return cb(new Error("Pr removeComment error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.files = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/files", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr files error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.reviews = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/reviews", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr reviews error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.review = function(id, cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/reviews/" + id, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr review error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.removeReview = function(id, cb) {
      return this.client.del("/repos/" + this.repo + "/pulls/" + this.number + "/reviews/" + id, {}, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr removeReview error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.reviewComments = function(id, cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/reviews/" + id + "/comments", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr reviewComments error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.createReview = function(reviewBody, cb) {
      return this.client.post("/repos/" + this.repo + "/pulls/" + this.number + "/reviews", reviewBody, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr createReview error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.submitReview = function(id, reviewBody, cb) {
      return this.client.post("/repos/" + this.repo + "/pulls/" + this.number + "/reviews/" + id + "/events", reviewBody, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr submitReview error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.dismissReview = function(id, dismissalMessage, cb) {
      var dismissal;
      dismissal = {
        message: dismissalMessage
      };
      return this.client.put("/repos/" + this.repo + "/pulls/" + this.number + "/reviews/" + id + "/dismissals", dismissal, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr dismissReview error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.reviewRequests = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/requested_reviewers", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr reviewRequests error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.createReviewRequests = function(usernames, cb) {
      var reviewRequest;
      reviewRequest = {
        reviewers: usernames
      };
      return this.client.post("/repos/" + this.repo + "/pulls/" + this.number + "/requested_reviewers", reviewRequest, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Pr createReviewRequests error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.removeReviewRequests = function(usernames, cb) {
      var reviewRequest;
      reviewRequest = {
        reviewers: usernames
      };
      return this.client.del("/repos/" + this.repo + "/pulls/" + this.number + "/requested_reviewers", reviewRequest, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr removeReviewRequests error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    return Pr;

  })(Base);

  module.exports = Pr;

}).call(this);
