// Generated by CoffeeScript 1.12.7
(function() {
  var Cmd, Issue,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Cmd = require('./cmd');

  Issue = (function(superClass) {
    extend(Issue, superClass);

    function Issue(repo, number, client) {
      this.repo = repo;
      this.number = number;
      this.client = client;
    }

    Issue.prototype.info = function(cb) {
      return this.client.get("/repos/" + this.repo + "/issues/" + this.number, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Issue info error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Issue.prototype.update = function(obj, cb) {
      return this.client.patch("/repos/" + this.repo + "/issues/" + this.number, obj, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Issue update error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Issue.prototype.comments = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/repos/" + this.repo + "/issues/" + this.number + "/comments"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Issue Comments error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    Issue.prototype.createComment = function(comment, cb) {
      return this.client.post("/repos/" + this.repo + "/issues/" + this.number + "/comments", comment, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error('Issue createComment error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Issue.prototype.updateComment = function(id, comment, cb) {
      return this.client.patch("/repos/" + this.repo + "/issues/comments/" + id, comment, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Issue updateComment error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Issue.prototype.deleteComment = function(id, cb) {
      return this.client.del("/repos/" + this.repo + "/issues/comments/" + id, {}, (function(_this) {
        return function(err, s, b, h) {
          if (err) {
            return cb(err);
          }
          if (s !== 204) {
            return cb(new Error("Issue deleteComment error"));
          } else {
            return cb(null, b, h);
          }
        };
      })(this));
    };

    Issue.prototype.labels = function(cb) {
      return this.client.get("/repos/" + this.repo + "/issues/" + this.number + "/labels", {}, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Issue labels error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Issue.prototype.addLabels = function(labels, cb) {
      return this.client.post("/repos/" + this.repo + "/issues/" + this.number + "/labels", labels, (function(_this) {
        return function(err, s, b, h) {
          if (err) {
            return cb(err);
          }
          if (s !== 200) {
            return cb(new Error("Issue addLabels error"));
          } else {
            return cb(null, b, h);
          }
        };
      })(this));
    };

    Issue.prototype.replaceAllLabels = function(labels, cb) {
      return this.client.put("/repos/" + this.repo + "/issues/" + this.number + "/labels", labels, (function(_this) {
        return function(err, s, b, h) {
          if (err) {
            return cb(err);
          }
          if (s !== 200) {
            return cb(new Error("Issue replaceLabels error"));
          } else {
            return cb(null, b, h);
          }
        };
      })(this));
    };

    Issue.prototype.removeLabel = function(label, cb) {
      return this.client.del(encodeURI("/repos/" + this.repo + "/issues/" + this.number + "/labels/" + label), {}, (function(_this) {
        return function(err, s, b, h) {
          if (err) {
            return cb(err);
          }
          if (s !== 200) {
            return cb(new Error("Issue removeLabel error"));
          } else {
            return cb(null, b, h);
          }
        };
      })(this));
    };

    Issue.prototype.removeAllLabels = function(cb) {
      return this.client.del("/repos/" + this.repo + "/issues/" + this.number + "/labels", {}, (function(_this) {
        return function(err, s, b, h) {
          if (err) {
            return cb(err);
          }
          if (s !== 204) {
            return cb(new Error("Issue removeAllLabels error"));
          } else {
            return cb(null, b, h);
          }
        };
      })(this));
    };

    return Issue;

  })(Cmd);

  module.exports = Issue;

}).call(this);
