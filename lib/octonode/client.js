// Generated by CoffeeScript 1.6.3
(function() {
  var Client, Gist, HttpError, Issue, Me, Org, Pr, Repo, Search, Team, User, extend, request, url,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  request = require('request');

  url = require('url');

  Me = require('./me');

  User = require('./user');

  Repo = require('./repo');

  Org = require('./org');

  Gist = require('./gist');

  Team = require('./team');

  Pr = require('./pr');

  Issue = require('./issue');

  extend = require('deep-extend');

  Search = require('./search');

  HttpError = (function(_super) {
    __extends(HttpError, _super);

    function HttpError(message, statusCode, headers) {
      this.message = message;
      this.statusCode = statusCode;
      this.headers = headers;
    }

    return HttpError;

  })(Error);

  Client = (function() {
    function Client(token, options) {
      this.token = token;
      this.options = options;
      this.limit = __bind(this.limit, this);
      this.requestOptions = __bind(this.requestOptions, this);
      this.request = this.options && this.options.request || request;
      this.requestDefaults = {
        headers: {
          'User-Agent': 'octonode/0.3 (https://github.com/pksunkara/octonode) terminal/0.0'
        },
        proxy: process.env.HTTP_PROXY
      };
    }

    Client.prototype.me = function() {
      return new Me(this);
    };

    Client.prototype.user = function(name) {
      return new User(name, this);
    };

    Client.prototype.repo = function(name) {
      return new Repo(name, this);
    };

    Client.prototype.org = function(name) {
      return new Org(name, this);
    };

    Client.prototype.gist = function() {
      return new Gist(this);
    };

    Client.prototype.team = function(id) {
      return new Team(id, this);
    };

    Client.prototype.pr = function(repo, number) {
      return new Pr(repo, number, this);
    };

    Client.prototype.search = function() {
      return new Search(this);
    };

    Client.prototype.issue = function(repo, number) {
      return new Issue(repo, number, this);
    };

    Client.prototype.requestOptions = function(params1, params2) {
      return extend(this.requestDefaults, params1, params2);
    };

    Client.prototype.buildUrl = function(path, pageOrQuery, per_page) {
      var q, query, separator, _url;
      if (path == null) {
        path = '/';
      }
      if (pageOrQuery == null) {
        pageOrQuery = null;
      }
      if (per_page == null) {
        per_page = null;
      }
      if ((pageOrQuery != null) && typeof pageOrQuery === 'object') {
        query = pageOrQuery;
      } else {
        query = {};
        if (pageOrQuery != null) {
          query.page = pageOrQuery;
        }
        if (per_page != null) {
          query.per_page = per_page;
        }
      }
      if (typeof this.token === 'string') {
        query.access_token = this.token;
      } else if (typeof this.token === 'object' && this.token.id) {
        query.client_id = this.token.id;
        query.client_secret = this.token.secret;
      }
      if (query.q) {
        q = query.q;
        delete query.q;
        if (Object.keys(query).length) {
          separator = '&';
        } else {
          separator = '?';
        }
      }
      _url = url.format({
        protocol: "https:",
        auth: typeof this.token === 'object' && this.token.username ? "" + this.token.username + ":" + this.token.password : '',
        hostname: this.options && this.options.hostname || "api.github.com",
        pathname: path,
        query: query
      });
      if (q) {
        _url += "" + separator + "q=" + q;
      }
      return _url;
    };

    Client.prototype.errorHandle = function(res, body, callback) {
      var err, _ref;
      if (Math.floor(res.statusCode / 100) === 5) {
        return callback(new HttpError('Error ' + res.statusCode, res.statusCode, res.headers));
      }
      if (typeof body === 'string') {
        try {
          body = JSON.parse(body || '{}');
        } catch (_error) {
          err = _error;
          return callback(err);
        }
      }
      if (body.message && ((_ref = res.statusCode) === 400 || _ref === 401 || _ref === 403 || _ref === 404 || _ref === 410 || _ref === 422)) {
        return callback(new HttpError(body.message, res.statusCode, res.headers));
      }
      return callback(null, res.statusCode, body, res.headers);
    };

    Client.prototype.get = function() {
      var callback, params, path, _i,
        _this = this;
      path = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      return this.request(this.requestOptions({
        uri: this.buildUrl.apply(this, [path].concat(__slice.call(params))),
        method: 'GET'
      }), function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.getNoFollow = function() {
      var callback, params, path, _i,
        _this = this;
      path = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      return this.request(this.requestOptions({
        uri: this.buildUrl.apply(this, [path].concat(__slice.call(params))),
        method: 'GET',
        followRedirect: false
      }), function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.getOptions = function() {
      var callback, options, params, path, _i,
        _this = this;
      path = arguments[0], options = arguments[1], params = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), callback = arguments[_i++];
      return this.request(this.requestOptions({
        uri: this.buildUrl.apply(this, [path].concat(__slice.call(params))),
        method: 'GET'
      }, options), function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.post = function(path, content, callback) {
      var _this = this;
      return this.request(this.requestOptions({
        uri: this.buildUrl(path),
        method: 'POST',
        body: JSON.stringify(content),
        headers: {
          'Content-Type': 'application/json'
        }
      }), function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.put = function(path, content, callback) {
      var _this = this;
      return this.request(this.requestOptions({
        uri: this.buildUrl(path),
        method: 'PUT',
        body: JSON.stringify(content),
        headers: {
          'Content-Type': 'application/json'
        }
      }), function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.del = function(path, content, callback) {
      var _this = this;
      return this.request(this.requestOptions({
        uri: this.buildUrl(path),
        method: 'DELETE',
        body: JSON.stringify(content),
        headers: {
          'Content-Type': 'application/json'
        }
      }), function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.limit = function(callback) {
      return this.get('/rate_limit', function(err, s, b) {
        if (err) {
          return callback(err);
        }
        if (s !== 200) {
          return callback(new HttpError('Client rate_limit error', s));
        } else {
          return callback(null, b.rate.remaining, b.rate.limit);
        }
      });
    };

    return Client;

  })();

  module.exports = function() {
    var credentials, token;
    token = arguments[0], credentials = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Client, [token].concat(__slice.call(credentials)), function(){});
  };

}).call(this);
