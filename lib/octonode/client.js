// Generated by CoffeeScript 1.4.0
(function() {
  var Client, Gist, Me, Org, Pr, Repo, Search, Team, User, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  request = require('request');

  Me = require('./me');

  User = require('./user');

  Repo = require('./repo');

  Org = require('./org');

  Gist = require('./gist');

  Team = require('./team');

  Pr = require('./pr');

  Search = require('./search');

  Client = (function() {

    function Client() {
      var credentials, token;
      token = arguments[0], credentials = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.token = token;
      this.limit = __bind(this.limit, this);

      if (this.token === 'client') {
        this.clientID = credentials[0], this.clientSecret = credentials[1];
      }
    }

    Client.prototype.me = function() {
      return new Me(this);
    };

    Client.prototype.user = function(name) {
      return new User(name, this);
    };

    Client.prototype.repo = function(name) {
      return new Repo(name, this);
    };

    Client.prototype.org = function(name) {
      return new Org(name, this);
    };

    Client.prototype.gist = function() {
      return new Gist(this);
    };

    Client.prototype.team = function(id) {
      return new Team(id, this);
    };

    Client.prototype.pr = function(repo, number) {
      return new Pr(repo, number, this);
    };

    Client.prototype.search = function() {
      return new Search(this);
    };

    Client.prototype.query = function(path, page, per_page) {
      var uri;
      if (path == null) {
        path = '/';
      }
      if (page == null) {
        page = null;
      }
      if (per_page == null) {
        per_page = null;
      }
      if (path[0] !== '/') {
        path = '/' + path;
      }
      uri = "https://";
      uri += typeof this.token === 'object' ? "" + this.token.username + ":" + this.token.password + "@" : '';
      uri += "api.github.com" + path + "?";
      uri += typeof this.token === 'string' && this.token !== 'client' ? "access_token=" + this.token : '';
      uri += this.token === 'client' ? "client_id=" + this.clientID + "&client_secret=" + this.clientSecret : '';
      if (page != null) {
        uri += "&page=" + page;
      }
      if (per_page != null) {
        uri += "&per_page=" + per_page;
      }
      return uri;
    };

    Client.prototype.errorHandle = function(res, body, callback) {
      var _ref;
      if (Math.floor(res.statusCode / 100) === 5) {
        return callback(new Error('Error ' + res.statusCode));
      }
      try {
        body = JSON.parse(body || '{}');
      } catch (err) {
        return callback(err);
      }
      if (body.message && res.statusCode === 422) {
        return callback(new Error(body.message));
      }
      if (body.message && ((_ref = res.statusCode) === 400 || _ref === 401 || _ref === 404)) {
        return callback(new Error(body.message));
      }
      return callback(null, res.statusCode, body, res.headers);
    };

    Client.prototype.get = function() {
      var callback, params, path, _i,
        _this = this;
      path = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      return request({
        uri: this.query.apply(this, [path].concat(__slice.call(params))),
        method: 'GET',
        headers: {
          'User-Agent': 'octonode/0.3 (https://github.com/pksunkara/octonode) terminal/0.0'
        }
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.post = function(path, content, callback) {
      var _this = this;
      return request({
        uri: this.query(path),
        method: 'POST',
        body: JSON.stringify(content),
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'octonode/0.3 (https://github.com/pksunkara/octonode) terminal/0.0'
        }
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.put = function(path, content, callback) {
      var _this = this;
      return request({
        uri: this.query(path),
        method: 'PUT',
        body: JSON.stringify(content),
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'octonode/0.3 (https://github.com/pksunkara/octonode) terminal/0.0'
        }
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.del = function(path, content, callback) {
      var _this = this;
      return request({
        uri: this.query(path),
        method: 'DELETE',
        body: JSON.stringify(content),
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'octonode/0.3 (https://github.com/pksunkara/octonode) terminal/0.0'
        }
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.errorHandle(res, body, callback);
      });
    };

    Client.prototype.limit = function(callback) {
      return this.get('/rate_limit', function(err, s, b) {
        if (err) {
          return callback(err);
        }
        if (s !== 200) {
          return callback(new Error('Client rate_limit error'));
        } else {
          return callback(null, b.rate.remaining, b.rate.limit);
        }
      });
    };

    return Client;

  })();

  module.exports = function() {
    var credentials, token;
    token = arguments[0], credentials = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Client, [token].concat(__slice.call(credentials)), function(){});
  };

}).call(this);
